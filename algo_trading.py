# -*- coding: utf-8 -*-
"""algo-trading

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vuXpqO1As_mdGDyEzCw37cpseZK7HynC
"""

pip install yfinance pandas numpy scikit-learn gspread oauth2client

!pip install gspread oauth2client

!pip install yfinance gspread oauth2client scikit-learn pandas

import yfinance as yf
import pandas as pd
from datetime import datetime, timedelta
from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
import gspread
from oauth2client.service_account import ServiceAccountCredentials
import logging
from google.colab import files
print("üìÅ Please upload your Google Sheets JSON key file")
uploaded = files.upload()
CREDS_FILE = list(uploaded.keys())[0]
print(f"‚úÖ Using credentials file: {CREDS_FILE}")
SHEET_NAME = "algo-trading"

# ‚úÖ Setup
pd.options.mode.copy_on_write = True
logging.basicConfig(level=logging.INFO, format='%(levelname)s: %(message)s')

# ‚úÖ Connect to Google Sheet
def connect_to_gsheet():
    scope = ['https://spreadsheets.google.com/feeds', 'https://www.googleapis.com/auth/drive']
    creds = ServiceAccountCredentials.from_json_keyfile_name(CREDS_FILE, scope)
    client = gspread.authorize(creds)
    sheet = client.open(SHEET_NAME)
    return sheet

# ‚úÖ Indicators
def calculate_technical_indicators(df):
    delta = df['Close'].diff()
    gain = delta.where(delta > 0, 0)
    loss = -delta.where(delta < 0, 0)
    avg_gain = gain.rolling(window=14).mean()
    avg_loss = loss.rolling(window=14).mean()
    rs = avg_gain / (avg_loss + 1e-10)
    df['RSI'] = 100 - (100 / (1 + rs))
    df['20DMA'] = df['Close'].rolling(window=20).mean()
    df['50DMA'] = df['Close'].rolling(window=50).mean()
    df['MACD'] = df['Close'].ewm(span=12, adjust=False).mean() - df['Close'].ewm(span=26, adjust=False).mean()
    df['MACD_Signal'] = df['MACD'].ewm(span=9, adjust=False).mean()
    df['Volume_Change'] = df['Volume'].pct_change()
    return df.dropna()

# Strategy
def simulate_strategy(df):
    df['Signal'] = 0
    df.loc[(df['RSI'] < 30) & (df['20DMA'] > df['50DMA']), 'Signal'] = 1
    df['Signal'] = df['Signal'].shift(1)
    df['Return'] = df['Close'].pct_change()
    df['Strategy_Return'] = df['Signal'] * df['Return']
    df['Cumulative'] = (1 + df['Strategy_Return'].fillna(0)).cumprod()
    total_return = round((df['Cumulative'].iloc[-1] - 1) * 100, 2)
    win_ratio = round(100 * (df['Strategy_Return'] > 0).sum() / len(df), 2)
    return total_return, win_ratio, df

# ML model
def run_ml_model(df):
    df = df.copy()
    df['Target'] = (df['Close'].shift(-1) > df['Close']).astype(int)
    df = df.dropna()
    features = df[['RSI', 'MACD', 'MACD_Signal', 'Volume_Change']].replace([float('inf'), float('-inf')], 0).fillna(0)
    X_train, X_test, y_train, y_test = train_test_split(features, df['Target'], test_size=0.2, shuffle=False)
    clf = DecisionTreeClassifier()
    clf.fit(X_train, y_train)
    preds = clf.predict(X_test)
    return round(accuracy_score(y_test, preds) * 100, 2)

# Run for 1 stock
def run_algo(stock_symbol):
    logging.info(f"üì• Fetching data for {stock_symbol}")
    start_date = (datetime.now() - timedelta(days=180)).strftime('%Y-%m-%d')
    data = yf.download(stock_symbol, start=start_date, auto_adjust=True)
    if data.empty:
        raise ValueError(f"No data fetched for {stock_symbol}.")
    df = calculate_technical_indicators(data)
    total_return, win_ratio, df = simulate_strategy(df)
    accuracy = run_ml_model(df)
    # Extract trades
    trade_log = df[df['Signal'] == 1].copy()
    trade_log['Entry_Date'] = trade_log.index.strftime('%Y-%m-%d')
    trade_log = trade_log[['Entry_Date', 'Close', 'RSI', '20DMA', '50DMA']]
    return {
        'Stock': stock_symbol,
        'Total Return %': total_return,
        'Win Ratio %': win_ratio,
        'ML Accuracy %': accuracy
    }, trade_log

# Run and collect data
stock_list = ["SBIN.NS","TCS.NS","ITC.NS"]
results = []
trade_logs = []

for stock in stock_list:
    try:
        result, trades = run_algo(stock)
        results.append(result)
        if not trades.empty:
            trades.insert(0, 'Stock', stock)
            trade_logs.append(trades)
    except Exception as e:
        logging.error(f"‚ùå Error processing {stock}: {e}")

# ‚úÖ Summary
summary_df = pd.DataFrame(results)
print("\nüìä Final Summary:\n")
print(summary_df)

# ‚úÖ Google Sheet Upload
try:
    gsheet = connect_to_gsheet()

    # ‚úÖ Upload Summary tab
    sheet = gsheet.sheet1
    sheet.clear()
    summary_data = [summary_df.columns.tolist()] + summary_df.astype(str).values.tolist()
    print("\n‚úÖ Uploading summary to Google Sheets:")
    sheet.update('A1', summary_data)

    # ‚úÖ Upload Trade Log tab (create or select)
    if len(gsheet.worksheets()) < 2:
        gsheet.add_worksheet(title="Trade_Log", rows="1000", cols="10")
    trade_sheet = gsheet.worksheet("Trade_Log")
    trade_sheet.clear()

    if trade_logs:
        all_trades = pd.concat(trade_logs)
        trade_data = [all_trades.columns.tolist()] + all_trades.astype(str).values.tolist()

        # ‚úÖ Filter and clean
        filtered_trade_data = [row for row in trade_data if all(row)]
        filtered_trade_data = [[str(cell) for cell in row] for row in filtered_trade_data]

        if len(filtered_trade_data) > 1:
            print("\n‚úÖ Uploading trade log:")
            trade_sheet.update('A1', filtered_trade_data)
        else:
            logging.warning("‚ö†Ô∏è No trade data available to upload.")
    else:
        logging.warning("‚ö†Ô∏è No trades were triggered in the last 6 months.")

    logging.info("‚úÖ Google Sheet updated successfully.")
except Exception as e:
    logging.exception("‚ùå An actual error occurred during Google Sheet upload.")